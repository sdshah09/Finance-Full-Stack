name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Build the image using docker-compose for consistency
      - name: Build Docker image with Compose
        run: docker-compose build

      - name: Push Docker image to Docker Hub
        run: docker-compose push

      - name: Deploy to EC2 using SSH
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          port: 22
          script: |
            # Navigate to project directory or clone the repo if not existing
            if [ ! -d "/home/${{ secrets.EC2_USER }}/Finance-Full-Stack" ]; then
              git clone https://github.com/sdshah09/Finance-Full-Stack.git /home/${{ secrets.EC2_USER }}/Finance-Full-Stack
            fi
            cd /home/${{ secrets.EC2_USER }}/Finance-Full-Stack
            git fetch origin main
            git pull origin main
      
            # Pull the latest Docker image from Docker Hub
            docker-compose pull

            # Create or update the .env file
            touch .env
            grep -qxF 'DB_HOST=${{ secrets.DB_HOST }}' .env || echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env
            grep -qxF 'DB_NAME=${{ secrets.DB_NAME }}' .env || echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env
            grep -qxF 'DB_USER=${{ secrets.DB_USER }}' .env || echo "DB_USER=${{ secrets.DB_USER }}" >> .env
            grep -qxF 'DB_PASSWORD=${{ secrets.DB_PASSWORD }}' .env || echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
            grep -qxF 'DB_PORT=${{ secrets.DB_PORT }}' .env || echo "DB_PORT=${{ secrets.DB_PORT }}" >> .env
      
            # Stop existing containers (if any)
            docker-compose down

            # Rebuild and restart services with Docker Compose
            yes | docker-compose up --build -d
